# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from calibration_msgs/LaserMeasurement.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import calibration_msgs.msg
import genpy
import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class LaserMeasurement(genpy.Message):
  _md5sum = "7fa7e818b1234a443aa5d8e315175d17"
  _type = "calibration_msgs/LaserMeasurement"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
string laser_id
sensor_msgs/JointState[] joint_points

# True -> The extra debugging fields are populated
bool verbose

# Extra, partially processed data. Only needed for debugging
calibration_msgs/DenseLaserSnapshot snapshot
sensor_msgs/Image laser_image
calibration_msgs/CalibrationPattern image_features
calibration_msgs/JointStateCalibrationPattern joint_features

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: calibration_msgs/DenseLaserSnapshot
# Provides all the state & sensor information for
# a single sweep of laser attached to some mechanism.
# Most likely, this will be used with PR2's tilting laser mechanism
Header header

# Store the laser intrinsics. This is very similar to the
# intrinsics commonly stored in 
float32 angle_min        # start angle of the scan [rad]
float32 angle_max        # end angle of the scan [rad]
float32 angle_increment  # angular distance between measurements [rad]
float32 time_increment   # time between measurements [seconds]
float32 range_min        # minimum range value [m]
float32 range_max        # maximum range value [m]

# Define the size of the binary data
uint32 readings_per_scan    # (Width)
uint32 num_scans            # (Height)

# 2D Arrays storing laser data.
# We can think of each type data as being a single channel image.
# Each row of the image has data from a single scan, and scans are
# concatenated to form the entire 'image'.
float32[] ranges            # (Image data)
float32[] intensities       # (Image data)

# Store the start time of each scan
time[] scan_start

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: calibration_msgs/CalibrationPattern
Header header
geometry_msgs/Point[] object_points
geometry_msgs/Point[] image_points
uint8 success

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: calibration_msgs/JointStateCalibrationPattern
Header header
geometry_msgs/Point[]  object_points
sensor_msgs/JointState[] joint_points

"""
  __slots__ = ['header','laser_id','joint_points','verbose','snapshot','laser_image','image_features','joint_features']
  _slot_types = ['std_msgs/Header','string','sensor_msgs/JointState[]','bool','calibration_msgs/DenseLaserSnapshot','sensor_msgs/Image','calibration_msgs/CalibrationPattern','calibration_msgs/JointStateCalibrationPattern']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,laser_id,joint_points,verbose,snapshot,laser_image,image_features,joint_features

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaserMeasurement, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.laser_id is None:
        self.laser_id = ''
      if self.joint_points is None:
        self.joint_points = []
      if self.verbose is None:
        self.verbose = False
      if self.snapshot is None:
        self.snapshot = calibration_msgs.msg.DenseLaserSnapshot()
      if self.laser_image is None:
        self.laser_image = sensor_msgs.msg.Image()
      if self.image_features is None:
        self.image_features = calibration_msgs.msg.CalibrationPattern()
      if self.joint_features is None:
        self.joint_features = calibration_msgs.msg.JointStateCalibrationPattern()
    else:
      self.header = std_msgs.msg.Header()
      self.laser_id = ''
      self.joint_points = []
      self.verbose = False
      self.snapshot = calibration_msgs.msg.DenseLaserSnapshot()
      self.laser_image = sensor_msgs.msg.Image()
      self.image_features = calibration_msgs.msg.CalibrationPattern()
      self.joint_features = calibration_msgs.msg.JointStateCalibrationPattern()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.laser_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.joint_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_points:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.position))
        length = len(val1.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.velocity))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.effort))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.verbose, _x.snapshot.header.seq, _x.snapshot.header.stamp.secs, _x.snapshot.header.stamp.nsecs))
      _x = self.snapshot.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f2I().pack(_x.snapshot.angle_min, _x.snapshot.angle_max, _x.snapshot.angle_increment, _x.snapshot.time_increment, _x.snapshot.range_min, _x.snapshot.range_max, _x.snapshot.readings_per_scan, _x.snapshot.num_scans))
      length = len(self.snapshot.ranges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.snapshot.ranges))
      length = len(self.snapshot.intensities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.snapshot.intensities))
      length = len(self.snapshot.scan_start)
      buff.write(_struct_I.pack(length))
      for val1 in self.snapshot.scan_start:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.laser_image.header.seq, _x.laser_image.header.stamp.secs, _x.laser_image.header.stamp.nsecs))
      _x = self.laser_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.laser_image.height, _x.laser_image.width))
      _x = self.laser_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.laser_image.is_bigendian, _x.laser_image.step))
      _x = self.laser_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_features.header.seq, _x.image_features.header.stamp.secs, _x.image_features.header.stamp.nsecs))
      _x = self.image_features.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.image_features.object_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_features.object_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.image_features.image_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_features.image_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.image_features.success, _x.joint_features.header.seq, _x.joint_features.header.stamp.secs, _x.joint_features.header.stamp.nsecs))
      _x = self.joint_features.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.joint_features.object_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_features.object_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.joint_features.joint_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_features.joint_points:
        _v3 = val1.header
        _x = _v3.seq
        buff.write(_get_struct_I().pack(_x))
        _v4 = _v3.stamp
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v3.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.position))
        length = len(val1.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.velocity))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.effort))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.joint_points is None:
        self.joint_points = None
      if self.snapshot is None:
        self.snapshot = calibration_msgs.msg.DenseLaserSnapshot()
      if self.laser_image is None:
        self.laser_image = sensor_msgs.msg.Image()
      if self.image_features is None:
        self.image_features = calibration_msgs.msg.CalibrationPattern()
      if self.joint_features is None:
        self.joint_features = calibration_msgs.msg.JointStateCalibrationPattern()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laser_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_points = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.JointState()
        _v5 = val1.header
        start = end
        end += 4
        (_v5.seq,) = _get_struct_I().unpack(str[start:end])
        _v6 = _v5.stamp
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v5.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v5.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.name.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.position = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocity = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = s.unpack(str[start:end])
        self.joint_points.append(val1)
      _x = self
      start = end
      end += 13
      (_x.verbose, _x.snapshot.header.seq, _x.snapshot.header.stamp.secs, _x.snapshot.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.verbose = bool(self.verbose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.snapshot.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.snapshot.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.snapshot.angle_min, _x.snapshot.angle_max, _x.snapshot.angle_increment, _x.snapshot.time_increment, _x.snapshot.range_min, _x.snapshot.range_max, _x.snapshot.readings_per_scan, _x.snapshot.num_scans,) = _get_struct_6f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.snapshot.ranges = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.snapshot.intensities = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.snapshot.scan_start = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.snapshot.scan_start.append(val1)
      _x = self
      start = end
      end += 12
      (_x.laser_image.header.seq, _x.laser_image.header.stamp.secs, _x.laser_image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laser_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.laser_image.height, _x.laser_image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_image.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laser_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.laser_image.is_bigendian, _x.laser_image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laser_image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_features.header.seq, _x.image_features.header.stamp.secs, _x.image_features.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_features.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_features.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_features.object_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.image_features.object_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_features.image_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.image_features.image_points.append(val1)
      _x = self
      start = end
      end += 13
      (_x.image_features.success, _x.joint_features.header.seq, _x.joint_features.header.stamp.secs, _x.joint_features.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint_features.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint_features.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_features.object_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.joint_features.object_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_features.joint_points = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.JointState()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.name.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.position = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocity = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = s.unpack(str[start:end])
        self.joint_features.joint_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.laser_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.joint_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_points:
        _v9 = val1.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.position.tostring())
        length = len(val1.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocity.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
      _x = self
      buff.write(_get_struct_B3I().pack(_x.verbose, _x.snapshot.header.seq, _x.snapshot.header.stamp.secs, _x.snapshot.header.stamp.nsecs))
      _x = self.snapshot.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f2I().pack(_x.snapshot.angle_min, _x.snapshot.angle_max, _x.snapshot.angle_increment, _x.snapshot.time_increment, _x.snapshot.range_min, _x.snapshot.range_max, _x.snapshot.readings_per_scan, _x.snapshot.num_scans))
      length = len(self.snapshot.ranges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.snapshot.ranges.tostring())
      length = len(self.snapshot.intensities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.snapshot.intensities.tostring())
      length = len(self.snapshot.scan_start)
      buff.write(_struct_I.pack(length))
      for val1 in self.snapshot.scan_start:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.laser_image.header.seq, _x.laser_image.header.stamp.secs, _x.laser_image.header.stamp.nsecs))
      _x = self.laser_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.laser_image.height, _x.laser_image.width))
      _x = self.laser_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.laser_image.is_bigendian, _x.laser_image.step))
      _x = self.laser_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_features.header.seq, _x.image_features.header.stamp.secs, _x.image_features.header.stamp.nsecs))
      _x = self.image_features.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.image_features.object_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_features.object_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.image_features.image_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_features.image_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.image_features.success, _x.joint_features.header.seq, _x.joint_features.header.stamp.secs, _x.joint_features.header.stamp.nsecs))
      _x = self.joint_features.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.joint_features.object_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_features.object_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.joint_features.joint_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_features.joint_points:
        _v11 = val1.header
        _x = _v11.seq
        buff.write(_get_struct_I().pack(_x))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.position.tostring())
        length = len(val1.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocity.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.joint_points is None:
        self.joint_points = None
      if self.snapshot is None:
        self.snapshot = calibration_msgs.msg.DenseLaserSnapshot()
      if self.laser_image is None:
        self.laser_image = sensor_msgs.msg.Image()
      if self.image_features is None:
        self.image_features = calibration_msgs.msg.CalibrationPattern()
      if self.joint_features is None:
        self.joint_features = calibration_msgs.msg.JointStateCalibrationPattern()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laser_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_points = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.JointState()
        _v13 = val1.header
        start = end
        end += 4
        (_v13.seq,) = _get_struct_I().unpack(str[start:end])
        _v14 = _v13.stamp
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v13.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.name.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.joint_points.append(val1)
      _x = self
      start = end
      end += 13
      (_x.verbose, _x.snapshot.header.seq, _x.snapshot.header.stamp.secs, _x.snapshot.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.verbose = bool(self.verbose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.snapshot.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.snapshot.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.snapshot.angle_min, _x.snapshot.angle_max, _x.snapshot.angle_increment, _x.snapshot.time_increment, _x.snapshot.range_min, _x.snapshot.range_max, _x.snapshot.readings_per_scan, _x.snapshot.num_scans,) = _get_struct_6f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.snapshot.ranges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.snapshot.intensities = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.snapshot.scan_start = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.snapshot.scan_start.append(val1)
      _x = self
      start = end
      end += 12
      (_x.laser_image.header.seq, _x.laser_image.header.stamp.secs, _x.laser_image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laser_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.laser_image.height, _x.laser_image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_image.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laser_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.laser_image.is_bigendian, _x.laser_image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laser_image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_features.header.seq, _x.image_features.header.stamp.secs, _x.image_features.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_features.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_features.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_features.object_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.image_features.object_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_features.image_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.image_features.image_points.append(val1)
      _x = self
      start = end
      end += 13
      (_x.image_features.success, _x.joint_features.header.seq, _x.joint_features.header.stamp.secs, _x.joint_features.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint_features.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint_features.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_features.object_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.joint_features.object_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_features.joint_points = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.JointState()
        _v15 = val1.header
        start = end
        end += 4
        (_v15.seq,) = _get_struct_I().unpack(str[start:end])
        _v16 = _v15.stamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.name.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.joint_features.joint_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6f2I = None
def _get_struct_6f2I():
    global _struct_6f2I
    if _struct_6f2I is None:
        _struct_6f2I = struct.Struct("<6f2I")
    return _struct_6f2I
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
