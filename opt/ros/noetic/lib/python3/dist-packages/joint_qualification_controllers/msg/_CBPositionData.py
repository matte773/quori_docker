# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from joint_qualification_controllers/CBPositionData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import joint_qualification_controllers.msg

class CBPositionData(genpy.Message):
  _md5sum = "e7b62743b80e10dde08aea881b6ccf7b"
  _type = "joint_qualification_controllers/CBPositionData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 flex_position
JointPositionData lift_hold
JointPositionData flex_hold

================================================================================
MSG: joint_qualification_controllers/JointPositionData
float32[] time
float32[] position
float32[] velocity
float32[] effort"""
  __slots__ = ['flex_position','lift_hold','flex_hold']
  _slot_types = ['float32','joint_qualification_controllers/JointPositionData','joint_qualification_controllers/JointPositionData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flex_position,lift_hold,flex_hold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CBPositionData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.flex_position is None:
        self.flex_position = 0.
      if self.lift_hold is None:
        self.lift_hold = joint_qualification_controllers.msg.JointPositionData()
      if self.flex_hold is None:
        self.flex_hold = joint_qualification_controllers.msg.JointPositionData()
    else:
      self.flex_position = 0.
      self.lift_hold = joint_qualification_controllers.msg.JointPositionData()
      self.flex_hold = joint_qualification_controllers.msg.JointPositionData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.flex_position
      buff.write(_get_struct_f().pack(_x))
      length = len(self.lift_hold.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.lift_hold.time))
      length = len(self.lift_hold.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.lift_hold.position))
      length = len(self.lift_hold.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.lift_hold.velocity))
      length = len(self.lift_hold.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.lift_hold.effort))
      length = len(self.flex_hold.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.flex_hold.time))
      length = len(self.flex_hold.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.flex_hold.position))
      length = len(self.flex_hold.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.flex_hold.velocity))
      length = len(self.flex_hold.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.flex_hold.effort))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lift_hold is None:
        self.lift_hold = joint_qualification_controllers.msg.JointPositionData()
      if self.flex_hold is None:
        self.flex_hold = joint_qualification_controllers.msg.JointPositionData()
      end = 0
      start = end
      end += 4
      (self.flex_position,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lift_hold.time = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lift_hold.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lift_hold.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lift_hold.effort = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_hold.time = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_hold.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_hold.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_hold.effort = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.flex_position
      buff.write(_get_struct_f().pack(_x))
      length = len(self.lift_hold.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lift_hold.time.tostring())
      length = len(self.lift_hold.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lift_hold.position.tostring())
      length = len(self.lift_hold.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lift_hold.velocity.tostring())
      length = len(self.lift_hold.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lift_hold.effort.tostring())
      length = len(self.flex_hold.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.flex_hold.time.tostring())
      length = len(self.flex_hold.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.flex_hold.position.tostring())
      length = len(self.flex_hold.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.flex_hold.velocity.tostring())
      length = len(self.flex_hold.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.flex_hold.effort.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lift_hold is None:
        self.lift_hold = joint_qualification_controllers.msg.JointPositionData()
      if self.flex_hold is None:
        self.flex_hold = joint_qualification_controllers.msg.JointPositionData()
      end = 0
      start = end
      end += 4
      (self.flex_position,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lift_hold.time = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lift_hold.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lift_hold.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lift_hold.effort = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_hold.time = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_hold.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_hold.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_hold.effort = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
