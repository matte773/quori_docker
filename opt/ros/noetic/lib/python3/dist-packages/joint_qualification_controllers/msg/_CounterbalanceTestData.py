# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from joint_qualification_controllers/CounterbalanceTestData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import joint_qualification_controllers.msg

class CounterbalanceTestData(genpy.Message):
  _md5sum = "ab80d40971aa9176fd2c9fb75aeb93cf"
  _type = "joint_qualification_controllers/CounterbalanceTestData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string lift_joint
string flex_joint
float32 lift_amplitude
float32 flex_amplitude
bool timeout_hit
bool flex_test
string[] arg_name
float32[] arg_value
CBRunData[] lift_data # Data for each hold
================================================================================
MSG: joint_qualification_controllers/CBRunData
float32 lift_position
CBPositionData[] flex_data # Same lift position, diff flex positions
================================================================================
MSG: joint_qualification_controllers/CBPositionData
float32 flex_position
JointPositionData lift_hold
JointPositionData flex_hold

================================================================================
MSG: joint_qualification_controllers/JointPositionData
float32[] time
float32[] position
float32[] velocity
float32[] effort"""
  __slots__ = ['lift_joint','flex_joint','lift_amplitude','flex_amplitude','timeout_hit','flex_test','arg_name','arg_value','lift_data']
  _slot_types = ['string','string','float32','float32','bool','bool','string[]','float32[]','joint_qualification_controllers/CBRunData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lift_joint,flex_joint,lift_amplitude,flex_amplitude,timeout_hit,flex_test,arg_name,arg_value,lift_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CounterbalanceTestData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lift_joint is None:
        self.lift_joint = ''
      if self.flex_joint is None:
        self.flex_joint = ''
      if self.lift_amplitude is None:
        self.lift_amplitude = 0.
      if self.flex_amplitude is None:
        self.flex_amplitude = 0.
      if self.timeout_hit is None:
        self.timeout_hit = False
      if self.flex_test is None:
        self.flex_test = False
      if self.arg_name is None:
        self.arg_name = []
      if self.arg_value is None:
        self.arg_value = []
      if self.lift_data is None:
        self.lift_data = []
    else:
      self.lift_joint = ''
      self.flex_joint = ''
      self.lift_amplitude = 0.
      self.flex_amplitude = 0.
      self.timeout_hit = False
      self.flex_test = False
      self.arg_name = []
      self.arg_value = []
      self.lift_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.lift_joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flex_joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f2B().pack(_x.lift_amplitude, _x.flex_amplitude, _x.timeout_hit, _x.flex_test))
      length = len(self.arg_name)
      buff.write(_struct_I.pack(length))
      for val1 in self.arg_name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.arg_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.arg_value))
      length = len(self.lift_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.lift_data:
        _x = val1.lift_position
        buff.write(_get_struct_f().pack(_x))
        length = len(val1.flex_data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.flex_data:
          _x = val2.flex_position
          buff.write(_get_struct_f().pack(_x))
          _v1 = val2.lift_hold
          length = len(_v1.time)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*_v1.time))
          length = len(_v1.position)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*_v1.position))
          length = len(_v1.velocity)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*_v1.velocity))
          length = len(_v1.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*_v1.effort))
          _v2 = val2.flex_hold
          length = len(_v2.time)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*_v2.time))
          length = len(_v2.position)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*_v2.position))
          length = len(_v2.velocity)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*_v2.velocity))
          length = len(_v2.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*_v2.effort))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lift_data is None:
        self.lift_data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lift_joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lift_joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flex_joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flex_joint = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.lift_amplitude, _x.flex_amplitude, _x.timeout_hit, _x.flex_test,) = _get_struct_2f2B().unpack(str[start:end])
      self.timeout_hit = bool(self.timeout_hit)
      self.flex_test = bool(self.flex_test)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.arg_name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.arg_name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.arg_value = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lift_data = []
      for i in range(0, length):
        val1 = joint_qualification_controllers.msg.CBRunData()
        start = end
        end += 4
        (val1.lift_position,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.flex_data = []
        for i in range(0, length):
          val2 = joint_qualification_controllers.msg.CBPositionData()
          start = end
          end += 4
          (val2.flex_position,) = _get_struct_f().unpack(str[start:end])
          _v3 = val2.lift_hold
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v3.time = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v3.position = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v3.velocity = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v3.effort = s.unpack(str[start:end])
          _v4 = val2.flex_hold
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v4.time = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v4.position = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v4.velocity = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v4.effort = s.unpack(str[start:end])
          val1.flex_data.append(val2)
        self.lift_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.lift_joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flex_joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f2B().pack(_x.lift_amplitude, _x.flex_amplitude, _x.timeout_hit, _x.flex_test))
      length = len(self.arg_name)
      buff.write(_struct_I.pack(length))
      for val1 in self.arg_name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.arg_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.arg_value.tostring())
      length = len(self.lift_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.lift_data:
        _x = val1.lift_position
        buff.write(_get_struct_f().pack(_x))
        length = len(val1.flex_data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.flex_data:
          _x = val2.flex_position
          buff.write(_get_struct_f().pack(_x))
          _v5 = val2.lift_hold
          length = len(_v5.time)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v5.time.tostring())
          length = len(_v5.position)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v5.position.tostring())
          length = len(_v5.velocity)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v5.velocity.tostring())
          length = len(_v5.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v5.effort.tostring())
          _v6 = val2.flex_hold
          length = len(_v6.time)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v6.time.tostring())
          length = len(_v6.position)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v6.position.tostring())
          length = len(_v6.velocity)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v6.velocity.tostring())
          length = len(_v6.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v6.effort.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lift_data is None:
        self.lift_data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lift_joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lift_joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flex_joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flex_joint = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.lift_amplitude, _x.flex_amplitude, _x.timeout_hit, _x.flex_test,) = _get_struct_2f2B().unpack(str[start:end])
      self.timeout_hit = bool(self.timeout_hit)
      self.flex_test = bool(self.flex_test)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.arg_name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.arg_name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.arg_value = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lift_data = []
      for i in range(0, length):
        val1 = joint_qualification_controllers.msg.CBRunData()
        start = end
        end += 4
        (val1.lift_position,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.flex_data = []
        for i in range(0, length):
          val2 = joint_qualification_controllers.msg.CBPositionData()
          start = end
          end += 4
          (val2.flex_position,) = _get_struct_f().unpack(str[start:end])
          _v7 = val2.lift_hold
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v7.time = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v7.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v7.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v7.effort = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          _v8 = val2.flex_hold
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v8.time = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v8.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v8.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v8.effort = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          val1.flex_data.append(val2)
        self.lift_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2B = None
def _get_struct_2f2B():
    global _struct_2f2B
    if _struct_2f2B is None:
        _struct_2f2B = struct.Struct("<2f2B")
    return _struct_2f2B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
