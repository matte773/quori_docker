# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from joint_qualification_controllers/RobotData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import joint_qualification_controllers.msg

class RobotData(genpy.Message):
  _md5sum = "025931e8023fe22bd8228a980121730a"
  _type = "joint_qualification_controllers/RobotData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 test_time
bool timeout
int32 num_joints
int32 num_actuators
JointData[] joint_data
ActuatorData[] actuator_data

================================================================================
MSG: joint_qualification_controllers/JointData
int16 index
string name
byte is_cal
byte has_safety
string type


================================================================================
MSG: joint_qualification_controllers/ActuatorData
int16 index
string name
int16 id

"""
  __slots__ = ['test_time','timeout','num_joints','num_actuators','joint_data','actuator_data']
  _slot_types = ['float32','bool','int32','int32','joint_qualification_controllers/JointData[]','joint_qualification_controllers/ActuatorData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       test_time,timeout,num_joints,num_actuators,joint_data,actuator_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.test_time is None:
        self.test_time = 0.
      if self.timeout is None:
        self.timeout = False
      if self.num_joints is None:
        self.num_joints = 0
      if self.num_actuators is None:
        self.num_actuators = 0
      if self.joint_data is None:
        self.joint_data = []
      if self.actuator_data is None:
        self.actuator_data = []
    else:
      self.test_time = 0.
      self.timeout = False
      self.num_joints = 0
      self.num_actuators = 0
      self.joint_data = []
      self.actuator_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fB2i().pack(_x.test_time, _x.timeout, _x.num_joints, _x.num_actuators))
      length = len(self.joint_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_data:
        _x = val1.index
        buff.write(_get_struct_h().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.is_cal, _x.has_safety))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.actuator_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.actuator_data:
        _x = val1.index
        buff.write(_get_struct_h().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_data is None:
        self.joint_data = None
      if self.actuator_data is None:
        self.actuator_data = None
      end = 0
      _x = self
      start = end
      end += 13
      (_x.test_time, _x.timeout, _x.num_joints, _x.num_actuators,) = _get_struct_fB2i().unpack(str[start:end])
      self.timeout = bool(self.timeout)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_data = []
      for i in range(0, length):
        val1 = joint_qualification_controllers.msg.JointData()
        start = end
        end += 2
        (val1.index,) = _get_struct_h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.is_cal, _x.has_safety,) = _get_struct_2b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        self.joint_data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actuator_data = []
      for i in range(0, length):
        val1 = joint_qualification_controllers.msg.ActuatorData()
        start = end
        end += 2
        (val1.index,) = _get_struct_h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 2
        (val1.id,) = _get_struct_h().unpack(str[start:end])
        self.actuator_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fB2i().pack(_x.test_time, _x.timeout, _x.num_joints, _x.num_actuators))
      length = len(self.joint_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_data:
        _x = val1.index
        buff.write(_get_struct_h().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.is_cal, _x.has_safety))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.actuator_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.actuator_data:
        _x = val1.index
        buff.write(_get_struct_h().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_data is None:
        self.joint_data = None
      if self.actuator_data is None:
        self.actuator_data = None
      end = 0
      _x = self
      start = end
      end += 13
      (_x.test_time, _x.timeout, _x.num_joints, _x.num_actuators,) = _get_struct_fB2i().unpack(str[start:end])
      self.timeout = bool(self.timeout)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_data = []
      for i in range(0, length):
        val1 = joint_qualification_controllers.msg.JointData()
        start = end
        end += 2
        (val1.index,) = _get_struct_h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.is_cal, _x.has_safety,) = _get_struct_2b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        self.joint_data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actuator_data = []
      for i in range(0, length):
        val1 = joint_qualification_controllers.msg.ActuatorData()
        start = end
        end += 2
        (val1.index,) = _get_struct_h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 2
        (val1.id,) = _get_struct_h().unpack(str[start:end])
        self.actuator_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_fB2i = None
def _get_struct_fB2i():
    global _struct_fB2i
    if _struct_fB2i is None:
        _struct_fB2i = struct.Struct("<fB2i")
    return _struct_fB2i
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
