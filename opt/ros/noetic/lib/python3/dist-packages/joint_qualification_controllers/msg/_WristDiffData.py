# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from joint_qualification_controllers/WristDiffData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import joint_qualification_controllers.msg

class WristDiffData(genpy.Message):
  _md5sum = "b5450bf7a09b17c68a893b9c02e710f1"
  _type = "joint_qualification_controllers/WristDiffData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string flex_joint
string roll_joint
float32[] flex_pid
float32[] roll_pid
string[] arg_name
float32[] arg_value
WristRollTurn left_turn
WristRollTurn right_turn
bool timeout

================================================================================
MSG: joint_qualification_controllers/WristRollTurn
float32[] time
float32[] flex_position
float32[] flex_effort
float32[] flex_cmd
float32[] roll_position
float32[] roll_effort
float32[] roll_cmd
float32[] roll_velocity
"""
  __slots__ = ['flex_joint','roll_joint','flex_pid','roll_pid','arg_name','arg_value','left_turn','right_turn','timeout']
  _slot_types = ['string','string','float32[]','float32[]','string[]','float32[]','joint_qualification_controllers/WristRollTurn','joint_qualification_controllers/WristRollTurn','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flex_joint,roll_joint,flex_pid,roll_pid,arg_name,arg_value,left_turn,right_turn,timeout

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WristDiffData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.flex_joint is None:
        self.flex_joint = ''
      if self.roll_joint is None:
        self.roll_joint = ''
      if self.flex_pid is None:
        self.flex_pid = []
      if self.roll_pid is None:
        self.roll_pid = []
      if self.arg_name is None:
        self.arg_name = []
      if self.arg_value is None:
        self.arg_value = []
      if self.left_turn is None:
        self.left_turn = joint_qualification_controllers.msg.WristRollTurn()
      if self.right_turn is None:
        self.right_turn = joint_qualification_controllers.msg.WristRollTurn()
      if self.timeout is None:
        self.timeout = False
    else:
      self.flex_joint = ''
      self.roll_joint = ''
      self.flex_pid = []
      self.roll_pid = []
      self.arg_name = []
      self.arg_value = []
      self.left_turn = joint_qualification_controllers.msg.WristRollTurn()
      self.right_turn = joint_qualification_controllers.msg.WristRollTurn()
      self.timeout = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.flex_joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.roll_joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.flex_pid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.flex_pid))
      length = len(self.roll_pid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.roll_pid))
      length = len(self.arg_name)
      buff.write(_struct_I.pack(length))
      for val1 in self.arg_name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.arg_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.arg_value))
      length = len(self.left_turn.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_turn.time))
      length = len(self.left_turn.flex_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_turn.flex_position))
      length = len(self.left_turn.flex_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_turn.flex_effort))
      length = len(self.left_turn.flex_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_turn.flex_cmd))
      length = len(self.left_turn.roll_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_turn.roll_position))
      length = len(self.left_turn.roll_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_turn.roll_effort))
      length = len(self.left_turn.roll_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_turn.roll_cmd))
      length = len(self.left_turn.roll_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_turn.roll_velocity))
      length = len(self.right_turn.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_turn.time))
      length = len(self.right_turn.flex_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_turn.flex_position))
      length = len(self.right_turn.flex_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_turn.flex_effort))
      length = len(self.right_turn.flex_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_turn.flex_cmd))
      length = len(self.right_turn.roll_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_turn.roll_position))
      length = len(self.right_turn.roll_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_turn.roll_effort))
      length = len(self.right_turn.roll_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_turn.roll_cmd))
      length = len(self.right_turn.roll_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_turn.roll_velocity))
      _x = self.timeout
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_turn is None:
        self.left_turn = joint_qualification_controllers.msg.WristRollTurn()
      if self.right_turn is None:
        self.right_turn = joint_qualification_controllers.msg.WristRollTurn()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flex_joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flex_joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roll_joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.roll_joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_pid = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.roll_pid = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.arg_name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.arg_name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.arg_value = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.time = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.flex_position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.flex_effort = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.flex_cmd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.roll_position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.roll_effort = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.roll_cmd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.roll_velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.time = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.flex_position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.flex_effort = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.flex_cmd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.roll_position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.roll_effort = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.roll_cmd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.roll_velocity = s.unpack(str[start:end])
      start = end
      end += 1
      (self.timeout,) = _get_struct_B().unpack(str[start:end])
      self.timeout = bool(self.timeout)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.flex_joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.roll_joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.flex_pid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.flex_pid.tostring())
      length = len(self.roll_pid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.roll_pid.tostring())
      length = len(self.arg_name)
      buff.write(_struct_I.pack(length))
      for val1 in self.arg_name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.arg_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.arg_value.tostring())
      length = len(self.left_turn.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_turn.time.tostring())
      length = len(self.left_turn.flex_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_turn.flex_position.tostring())
      length = len(self.left_turn.flex_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_turn.flex_effort.tostring())
      length = len(self.left_turn.flex_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_turn.flex_cmd.tostring())
      length = len(self.left_turn.roll_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_turn.roll_position.tostring())
      length = len(self.left_turn.roll_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_turn.roll_effort.tostring())
      length = len(self.left_turn.roll_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_turn.roll_cmd.tostring())
      length = len(self.left_turn.roll_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_turn.roll_velocity.tostring())
      length = len(self.right_turn.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_turn.time.tostring())
      length = len(self.right_turn.flex_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_turn.flex_position.tostring())
      length = len(self.right_turn.flex_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_turn.flex_effort.tostring())
      length = len(self.right_turn.flex_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_turn.flex_cmd.tostring())
      length = len(self.right_turn.roll_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_turn.roll_position.tostring())
      length = len(self.right_turn.roll_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_turn.roll_effort.tostring())
      length = len(self.right_turn.roll_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_turn.roll_cmd.tostring())
      length = len(self.right_turn.roll_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_turn.roll_velocity.tostring())
      _x = self.timeout
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_turn is None:
        self.left_turn = joint_qualification_controllers.msg.WristRollTurn()
      if self.right_turn is None:
        self.right_turn = joint_qualification_controllers.msg.WristRollTurn()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flex_joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flex_joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roll_joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.roll_joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flex_pid = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.roll_pid = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.arg_name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.arg_name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.arg_value = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.time = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.flex_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.flex_effort = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.flex_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.roll_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.roll_effort = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.roll_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_turn.roll_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.time = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.flex_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.flex_effort = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.flex_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.roll_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.roll_effort = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.roll_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_turn.roll_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.timeout,) = _get_struct_B().unpack(str[start:end])
      self.timeout = bool(self.timeout)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
