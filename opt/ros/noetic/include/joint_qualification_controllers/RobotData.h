// Generated by gencpp from file joint_qualification_controllers/RobotData.msg
// DO NOT EDIT!


#ifndef JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_ROBOTDATA_H
#define JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_ROBOTDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <joint_qualification_controllers/JointData.h>
#include <joint_qualification_controllers/ActuatorData.h>

namespace joint_qualification_controllers
{
template <class ContainerAllocator>
struct RobotData_
{
  typedef RobotData_<ContainerAllocator> Type;

  RobotData_()
    : test_time(0.0)
    , timeout(false)
    , num_joints(0)
    , num_actuators(0)
    , joint_data()
    , actuator_data()  {
    }
  RobotData_(const ContainerAllocator& _alloc)
    : test_time(0.0)
    , timeout(false)
    , num_joints(0)
    , num_actuators(0)
    , joint_data(_alloc)
    , actuator_data(_alloc)  {
  (void)_alloc;
    }



   typedef float _test_time_type;
  _test_time_type test_time;

   typedef uint8_t _timeout_type;
  _timeout_type timeout;

   typedef int32_t _num_joints_type;
  _num_joints_type num_joints;

   typedef int32_t _num_actuators_type;
  _num_actuators_type num_actuators;

   typedef std::vector< ::joint_qualification_controllers::JointData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::joint_qualification_controllers::JointData_<ContainerAllocator> >> _joint_data_type;
  _joint_data_type joint_data;

   typedef std::vector< ::joint_qualification_controllers::ActuatorData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::joint_qualification_controllers::ActuatorData_<ContainerAllocator> >> _actuator_data_type;
  _actuator_data_type actuator_data;





  typedef boost::shared_ptr< ::joint_qualification_controllers::RobotData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_qualification_controllers::RobotData_<ContainerAllocator> const> ConstPtr;

}; // struct RobotData_

typedef ::joint_qualification_controllers::RobotData_<std::allocator<void> > RobotData;

typedef boost::shared_ptr< ::joint_qualification_controllers::RobotData > RobotDataPtr;
typedef boost::shared_ptr< ::joint_qualification_controllers::RobotData const> RobotDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joint_qualification_controllers::RobotData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joint_qualification_controllers::RobotData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joint_qualification_controllers::RobotData_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::RobotData_<ContainerAllocator2> & rhs)
{
  return lhs.test_time == rhs.test_time &&
    lhs.timeout == rhs.timeout &&
    lhs.num_joints == rhs.num_joints &&
    lhs.num_actuators == rhs.num_actuators &&
    lhs.joint_data == rhs.joint_data &&
    lhs.actuator_data == rhs.actuator_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joint_qualification_controllers::RobotData_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::RobotData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joint_qualification_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::RobotData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::RobotData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::RobotData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::RobotData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::RobotData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::RobotData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joint_qualification_controllers::RobotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "025931e8023fe22bd8228a980121730a";
  }

  static const char* value(const ::joint_qualification_controllers::RobotData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x025931e8023fe22bULL;
  static const uint64_t static_value2 = 0xd8228a980121730aULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_qualification_controllers::RobotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joint_qualification_controllers/RobotData";
  }

  static const char* value(const ::joint_qualification_controllers::RobotData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joint_qualification_controllers::RobotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 test_time\n"
"bool timeout\n"
"int32 num_joints\n"
"int32 num_actuators\n"
"JointData[] joint_data\n"
"ActuatorData[] actuator_data\n"
"\n"
"================================================================================\n"
"MSG: joint_qualification_controllers/JointData\n"
"int16 index\n"
"string name\n"
"byte is_cal\n"
"byte has_safety\n"
"string type\n"
"\n"
"\n"
"================================================================================\n"
"MSG: joint_qualification_controllers/ActuatorData\n"
"int16 index\n"
"string name\n"
"int16 id\n"
"\n"
;
  }

  static const char* value(const ::joint_qualification_controllers::RobotData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joint_qualification_controllers::RobotData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.test_time);
      stream.next(m.timeout);
      stream.next(m.num_joints);
      stream.next(m.num_actuators);
      stream.next(m.joint_data);
      stream.next(m.actuator_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_qualification_controllers::RobotData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joint_qualification_controllers::RobotData_<ContainerAllocator>& v)
  {
    s << indent << "test_time: ";
    Printer<float>::stream(s, indent + "  ", v.test_time);
    s << indent << "timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timeout);
    s << indent << "num_joints: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_joints);
    s << indent << "num_actuators: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_actuators);
    s << indent << "joint_data[]" << std::endl;
    for (size_t i = 0; i < v.joint_data.size(); ++i)
    {
      s << indent << "  joint_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::joint_qualification_controllers::JointData_<ContainerAllocator> >::stream(s, indent + "    ", v.joint_data[i]);
    }
    s << indent << "actuator_data[]" << std::endl;
    for (size_t i = 0; i < v.actuator_data.size(); ++i)
    {
      s << indent << "  actuator_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::joint_qualification_controllers::ActuatorData_<ContainerAllocator> >::stream(s, indent + "    ", v.actuator_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_ROBOTDATA_H
