// Generated by gencpp from file joint_qualification_controllers/HysteresisData2.msg
// DO NOT EDIT!


#ifndef JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_HYSTERESISDATA2_H
#define JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_HYSTERESISDATA2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <joint_qualification_controllers/HysteresisRun.h>

namespace joint_qualification_controllers
{
template <class ContainerAllocator>
struct HysteresisData2_
{
  typedef HysteresisData2_<ContainerAllocator> Type;

  HysteresisData2_()
    : joint_name()
    , runs()
    , arg_name()
    , arg_value()  {
    }
  HysteresisData2_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , runs(_alloc)
    , arg_name(_alloc)
    , arg_value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _joint_name_type;
  _joint_name_type joint_name;

   typedef std::vector< ::joint_qualification_controllers::HysteresisRun_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::joint_qualification_controllers::HysteresisRun_<ContainerAllocator> >> _runs_type;
  _runs_type runs;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _arg_name_type;
  _arg_name_type arg_name;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _arg_value_type;
  _arg_value_type arg_value;





  typedef boost::shared_ptr< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> const> ConstPtr;

}; // struct HysteresisData2_

typedef ::joint_qualification_controllers::HysteresisData2_<std::allocator<void> > HysteresisData2;

typedef boost::shared_ptr< ::joint_qualification_controllers::HysteresisData2 > HysteresisData2Ptr;
typedef boost::shared_ptr< ::joint_qualification_controllers::HysteresisData2 const> HysteresisData2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator2> & rhs)
{
  return lhs.joint_name == rhs.joint_name &&
    lhs.runs == rhs.runs &&
    lhs.arg_name == rhs.arg_name &&
    lhs.arg_value == rhs.arg_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joint_qualification_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e58eacdd7f3ac3c02f9d494da1e59355";
  }

  static const char* value(const ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe58eacdd7f3ac3c0ULL;
  static const uint64_t static_value2 = 0x2f9d494da1e59355ULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joint_qualification_controllers/HysteresisData2";
  }

  static const char* value(const ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string joint_name\n"
"\n"
"HysteresisRun[] runs\n"
"\n"
"string[] arg_name\n"
"float32[] arg_value\n"
"\n"
"================================================================================\n"
"MSG: joint_qualification_controllers/HysteresisRun\n"
"float32[] time\n"
"float32[] effort\n"
"float32[] position\n"
"float32[] velocity\n"
"uint8 dir\n"
"uint8 UP=0\n"
"uint8 DOWN=1\n"
;
  }

  static const char* value(const ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.runs);
      stream.next(m.arg_name);
      stream.next(m.arg_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HysteresisData2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joint_qualification_controllers::HysteresisData2_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_name);
    s << indent << "runs[]" << std::endl;
    for (size_t i = 0; i < v.runs.size(); ++i)
    {
      s << indent << "  runs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::joint_qualification_controllers::HysteresisRun_<ContainerAllocator> >::stream(s, indent + "    ", v.runs[i]);
    }
    s << indent << "arg_name[]" << std::endl;
    for (size_t i = 0; i < v.arg_name.size(); ++i)
    {
      s << indent << "  arg_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.arg_name[i]);
    }
    s << indent << "arg_value[]" << std::endl;
    for (size_t i = 0; i < v.arg_value.size(); ++i)
    {
      s << indent << "  arg_value[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.arg_value[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_HYSTERESISDATA2_H
