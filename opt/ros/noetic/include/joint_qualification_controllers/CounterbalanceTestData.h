// Generated by gencpp from file joint_qualification_controllers/CounterbalanceTestData.msg
// DO NOT EDIT!


#ifndef JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_COUNTERBALANCETESTDATA_H
#define JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_COUNTERBALANCETESTDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <joint_qualification_controllers/CBRunData.h>

namespace joint_qualification_controllers
{
template <class ContainerAllocator>
struct CounterbalanceTestData_
{
  typedef CounterbalanceTestData_<ContainerAllocator> Type;

  CounterbalanceTestData_()
    : lift_joint()
    , flex_joint()
    , lift_amplitude(0.0)
    , flex_amplitude(0.0)
    , timeout_hit(false)
    , flex_test(false)
    , arg_name()
    , arg_value()
    , lift_data()  {
    }
  CounterbalanceTestData_(const ContainerAllocator& _alloc)
    : lift_joint(_alloc)
    , flex_joint(_alloc)
    , lift_amplitude(0.0)
    , flex_amplitude(0.0)
    , timeout_hit(false)
    , flex_test(false)
    , arg_name(_alloc)
    , arg_value(_alloc)
    , lift_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _lift_joint_type;
  _lift_joint_type lift_joint;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _flex_joint_type;
  _flex_joint_type flex_joint;

   typedef float _lift_amplitude_type;
  _lift_amplitude_type lift_amplitude;

   typedef float _flex_amplitude_type;
  _flex_amplitude_type flex_amplitude;

   typedef uint8_t _timeout_hit_type;
  _timeout_hit_type timeout_hit;

   typedef uint8_t _flex_test_type;
  _flex_test_type flex_test;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _arg_name_type;
  _arg_name_type arg_name;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _arg_value_type;
  _arg_value_type arg_value;

   typedef std::vector< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >> _lift_data_type;
  _lift_data_type lift_data;





  typedef boost::shared_ptr< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> const> ConstPtr;

}; // struct CounterbalanceTestData_

typedef ::joint_qualification_controllers::CounterbalanceTestData_<std::allocator<void> > CounterbalanceTestData;

typedef boost::shared_ptr< ::joint_qualification_controllers::CounterbalanceTestData > CounterbalanceTestDataPtr;
typedef boost::shared_ptr< ::joint_qualification_controllers::CounterbalanceTestData const> CounterbalanceTestDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator2> & rhs)
{
  return lhs.lift_joint == rhs.lift_joint &&
    lhs.flex_joint == rhs.flex_joint &&
    lhs.lift_amplitude == rhs.lift_amplitude &&
    lhs.flex_amplitude == rhs.flex_amplitude &&
    lhs.timeout_hit == rhs.timeout_hit &&
    lhs.flex_test == rhs.flex_test &&
    lhs.arg_name == rhs.arg_name &&
    lhs.arg_value == rhs.arg_value &&
    lhs.lift_data == rhs.lift_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joint_qualification_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab80d40971aa9176fd2c9fb75aeb93cf";
  }

  static const char* value(const ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab80d40971aa9176ULL;
  static const uint64_t static_value2 = 0xfd2c9fb75aeb93cfULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joint_qualification_controllers/CounterbalanceTestData";
  }

  static const char* value(const ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string lift_joint\n"
"string flex_joint\n"
"float32 lift_amplitude\n"
"float32 flex_amplitude\n"
"bool timeout_hit\n"
"bool flex_test\n"
"string[] arg_name\n"
"float32[] arg_value\n"
"CBRunData[] lift_data # Data for each hold\n"
"================================================================================\n"
"MSG: joint_qualification_controllers/CBRunData\n"
"float32 lift_position\n"
"CBPositionData[] flex_data # Same lift position, diff flex positions\n"
"================================================================================\n"
"MSG: joint_qualification_controllers/CBPositionData\n"
"float32 flex_position\n"
"JointPositionData lift_hold\n"
"JointPositionData flex_hold\n"
"\n"
"================================================================================\n"
"MSG: joint_qualification_controllers/JointPositionData\n"
"float32[] time\n"
"float32[] position\n"
"float32[] velocity\n"
"float32[] effort\n"
;
  }

  static const char* value(const ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lift_joint);
      stream.next(m.flex_joint);
      stream.next(m.lift_amplitude);
      stream.next(m.flex_amplitude);
      stream.next(m.timeout_hit);
      stream.next(m.flex_test);
      stream.next(m.arg_name);
      stream.next(m.arg_value);
      stream.next(m.lift_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CounterbalanceTestData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joint_qualification_controllers::CounterbalanceTestData_<ContainerAllocator>& v)
  {
    s << indent << "lift_joint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.lift_joint);
    s << indent << "flex_joint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.flex_joint);
    s << indent << "lift_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.lift_amplitude);
    s << indent << "flex_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.flex_amplitude);
    s << indent << "timeout_hit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timeout_hit);
    s << indent << "flex_test: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flex_test);
    s << indent << "arg_name[]" << std::endl;
    for (size_t i = 0; i < v.arg_name.size(); ++i)
    {
      s << indent << "  arg_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.arg_name[i]);
    }
    s << indent << "arg_value[]" << std::endl;
    for (size_t i = 0; i < v.arg_value.size(); ++i)
    {
      s << indent << "  arg_value[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.arg_value[i]);
    }
    s << indent << "lift_data[]" << std::endl;
    for (size_t i = 0; i < v.lift_data.size(); ++i)
    {
      s << indent << "  lift_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >::stream(s, indent + "    ", v.lift_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_COUNTERBALANCETESTDATA_H
