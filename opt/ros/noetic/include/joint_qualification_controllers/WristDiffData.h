// Generated by gencpp from file joint_qualification_controllers/WristDiffData.msg
// DO NOT EDIT!


#ifndef JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_WRISTDIFFDATA_H
#define JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_WRISTDIFFDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <joint_qualification_controllers/WristRollTurn.h>
#include <joint_qualification_controllers/WristRollTurn.h>

namespace joint_qualification_controllers
{
template <class ContainerAllocator>
struct WristDiffData_
{
  typedef WristDiffData_<ContainerAllocator> Type;

  WristDiffData_()
    : flex_joint()
    , roll_joint()
    , flex_pid()
    , roll_pid()
    , arg_name()
    , arg_value()
    , left_turn()
    , right_turn()
    , timeout(false)  {
    }
  WristDiffData_(const ContainerAllocator& _alloc)
    : flex_joint(_alloc)
    , roll_joint(_alloc)
    , flex_pid(_alloc)
    , roll_pid(_alloc)
    , arg_name(_alloc)
    , arg_value(_alloc)
    , left_turn(_alloc)
    , right_turn(_alloc)
    , timeout(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _flex_joint_type;
  _flex_joint_type flex_joint;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _roll_joint_type;
  _roll_joint_type roll_joint;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _flex_pid_type;
  _flex_pid_type flex_pid;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _roll_pid_type;
  _roll_pid_type roll_pid;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _arg_name_type;
  _arg_name_type arg_name;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _arg_value_type;
  _arg_value_type arg_value;

   typedef  ::joint_qualification_controllers::WristRollTurn_<ContainerAllocator>  _left_turn_type;
  _left_turn_type left_turn;

   typedef  ::joint_qualification_controllers::WristRollTurn_<ContainerAllocator>  _right_turn_type;
  _right_turn_type right_turn;

   typedef uint8_t _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> const> ConstPtr;

}; // struct WristDiffData_

typedef ::joint_qualification_controllers::WristDiffData_<std::allocator<void> > WristDiffData;

typedef boost::shared_ptr< ::joint_qualification_controllers::WristDiffData > WristDiffDataPtr;
typedef boost::shared_ptr< ::joint_qualification_controllers::WristDiffData const> WristDiffDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joint_qualification_controllers::WristDiffData_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::WristDiffData_<ContainerAllocator2> & rhs)
{
  return lhs.flex_joint == rhs.flex_joint &&
    lhs.roll_joint == rhs.roll_joint &&
    lhs.flex_pid == rhs.flex_pid &&
    lhs.roll_pid == rhs.roll_pid &&
    lhs.arg_name == rhs.arg_name &&
    lhs.arg_value == rhs.arg_value &&
    lhs.left_turn == rhs.left_turn &&
    lhs.right_turn == rhs.right_turn &&
    lhs.timeout == rhs.timeout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joint_qualification_controllers::WristDiffData_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::WristDiffData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joint_qualification_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5450bf7a09b17c68a893b9c02e710f1";
  }

  static const char* value(const ::joint_qualification_controllers::WristDiffData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5450bf7a09b17c6ULL;
  static const uint64_t static_value2 = 0x8a893b9c02e710f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joint_qualification_controllers/WristDiffData";
  }

  static const char* value(const ::joint_qualification_controllers::WristDiffData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string flex_joint\n"
"string roll_joint\n"
"float32[] flex_pid\n"
"float32[] roll_pid\n"
"string[] arg_name\n"
"float32[] arg_value\n"
"WristRollTurn left_turn\n"
"WristRollTurn right_turn\n"
"bool timeout\n"
"\n"
"================================================================================\n"
"MSG: joint_qualification_controllers/WristRollTurn\n"
"float32[] time\n"
"float32[] flex_position\n"
"float32[] flex_effort\n"
"float32[] flex_cmd\n"
"float32[] roll_position\n"
"float32[] roll_effort\n"
"float32[] roll_cmd\n"
"float32[] roll_velocity\n"
;
  }

  static const char* value(const ::joint_qualification_controllers::WristDiffData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flex_joint);
      stream.next(m.roll_joint);
      stream.next(m.flex_pid);
      stream.next(m.roll_pid);
      stream.next(m.arg_name);
      stream.next(m.arg_value);
      stream.next(m.left_turn);
      stream.next(m.right_turn);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WristDiffData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_qualification_controllers::WristDiffData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joint_qualification_controllers::WristDiffData_<ContainerAllocator>& v)
  {
    s << indent << "flex_joint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.flex_joint);
    s << indent << "roll_joint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.roll_joint);
    s << indent << "flex_pid[]" << std::endl;
    for (size_t i = 0; i < v.flex_pid.size(); ++i)
    {
      s << indent << "  flex_pid[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.flex_pid[i]);
    }
    s << indent << "roll_pid[]" << std::endl;
    for (size_t i = 0; i < v.roll_pid.size(); ++i)
    {
      s << indent << "  roll_pid[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.roll_pid[i]);
    }
    s << indent << "arg_name[]" << std::endl;
    for (size_t i = 0; i < v.arg_name.size(); ++i)
    {
      s << indent << "  arg_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.arg_name[i]);
    }
    s << indent << "arg_value[]" << std::endl;
    for (size_t i = 0; i < v.arg_value.size(); ++i)
    {
      s << indent << "  arg_value[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.arg_value[i]);
    }
    s << indent << "left_turn: ";
    s << std::endl;
    Printer< ::joint_qualification_controllers::WristRollTurn_<ContainerAllocator> >::stream(s, indent + "  ", v.left_turn);
    s << indent << "right_turn: ";
    s << std::endl;
    Printer< ::joint_qualification_controllers::WristRollTurn_<ContainerAllocator> >::stream(s, indent + "  ", v.right_turn);
    s << indent << "timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_WRISTDIFFDATA_H
