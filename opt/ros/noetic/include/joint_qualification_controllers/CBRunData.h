// Generated by gencpp from file joint_qualification_controllers/CBRunData.msg
// DO NOT EDIT!


#ifndef JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_CBRUNDATA_H
#define JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_CBRUNDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <joint_qualification_controllers/CBPositionData.h>

namespace joint_qualification_controllers
{
template <class ContainerAllocator>
struct CBRunData_
{
  typedef CBRunData_<ContainerAllocator> Type;

  CBRunData_()
    : lift_position(0.0)
    , flex_data()  {
    }
  CBRunData_(const ContainerAllocator& _alloc)
    : lift_position(0.0)
    , flex_data(_alloc)  {
  (void)_alloc;
    }



   typedef float _lift_position_type;
  _lift_position_type lift_position;

   typedef std::vector< ::joint_qualification_controllers::CBPositionData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::joint_qualification_controllers::CBPositionData_<ContainerAllocator> >> _flex_data_type;
  _flex_data_type flex_data;





  typedef boost::shared_ptr< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> const> ConstPtr;

}; // struct CBRunData_

typedef ::joint_qualification_controllers::CBRunData_<std::allocator<void> > CBRunData;

typedef boost::shared_ptr< ::joint_qualification_controllers::CBRunData > CBRunDataPtr;
typedef boost::shared_ptr< ::joint_qualification_controllers::CBRunData const> CBRunDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joint_qualification_controllers::CBRunData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joint_qualification_controllers::CBRunData_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::CBRunData_<ContainerAllocator2> & rhs)
{
  return lhs.lift_position == rhs.lift_position &&
    lhs.flex_data == rhs.flex_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joint_qualification_controllers::CBRunData_<ContainerAllocator1> & lhs, const ::joint_qualification_controllers::CBRunData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joint_qualification_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16bad2df24f5cffc934c2d3ae9bb08e6";
  }

  static const char* value(const ::joint_qualification_controllers::CBRunData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16bad2df24f5cffcULL;
  static const uint64_t static_value2 = 0x934c2d3ae9bb08e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joint_qualification_controllers/CBRunData";
  }

  static const char* value(const ::joint_qualification_controllers::CBRunData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lift_position\n"
"CBPositionData[] flex_data # Same lift position, diff flex positions\n"
"================================================================================\n"
"MSG: joint_qualification_controllers/CBPositionData\n"
"float32 flex_position\n"
"JointPositionData lift_hold\n"
"JointPositionData flex_hold\n"
"\n"
"================================================================================\n"
"MSG: joint_qualification_controllers/JointPositionData\n"
"float32[] time\n"
"float32[] position\n"
"float32[] velocity\n"
"float32[] effort\n"
;
  }

  static const char* value(const ::joint_qualification_controllers::CBRunData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lift_position);
      stream.next(m.flex_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CBRunData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_qualification_controllers::CBRunData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joint_qualification_controllers::CBRunData_<ContainerAllocator>& v)
  {
    s << indent << "lift_position: ";
    Printer<float>::stream(s, indent + "  ", v.lift_position);
    s << indent << "flex_data[]" << std::endl;
    for (size_t i = 0; i < v.flex_data.size(); ++i)
    {
      s << indent << "  flex_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::joint_qualification_controllers::CBPositionData_<ContainerAllocator> >::stream(s, indent + "    ", v.flex_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINT_QUALIFICATION_CONTROLLERS_MESSAGE_CBRUNDATA_H
