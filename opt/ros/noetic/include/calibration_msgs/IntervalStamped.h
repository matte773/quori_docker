// Generated by gencpp from file calibration_msgs/IntervalStamped.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MSGS_MESSAGE_INTERVALSTAMPED_H
#define CALIBRATION_MSGS_MESSAGE_INTERVALSTAMPED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <calibration_msgs/Interval.h>

namespace calibration_msgs
{
template <class ContainerAllocator>
struct IntervalStamped_
{
  typedef IntervalStamped_<ContainerAllocator> Type;

  IntervalStamped_()
    : header()
    , interval()  {
    }
  IntervalStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , interval(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::calibration_msgs::Interval_<ContainerAllocator>  _interval_type;
  _interval_type interval;





  typedef boost::shared_ptr< ::calibration_msgs::IntervalStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration_msgs::IntervalStamped_<ContainerAllocator> const> ConstPtr;

}; // struct IntervalStamped_

typedef ::calibration_msgs::IntervalStamped_<std::allocator<void> > IntervalStamped;

typedef boost::shared_ptr< ::calibration_msgs::IntervalStamped > IntervalStampedPtr;
typedef boost::shared_ptr< ::calibration_msgs::IntervalStamped const> IntervalStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration_msgs::IntervalStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration_msgs::IntervalStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::calibration_msgs::IntervalStamped_<ContainerAllocator1> & lhs, const ::calibration_msgs::IntervalStamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.interval == rhs.interval;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::calibration_msgs::IntervalStamped_<ContainerAllocator1> & lhs, const ::calibration_msgs::IntervalStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace calibration_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::IntervalStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::IntervalStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::IntervalStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::IntervalStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::IntervalStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::IntervalStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration_msgs::IntervalStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b9fc1d72815ffa87542f8dc47ef7484";
  }

  static const char* value(const ::calibration_msgs::IntervalStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b9fc1d72815ffa8ULL;
  static const uint64_t static_value2 = 0x7542f8dc47ef7484ULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration_msgs::IntervalStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration_msgs/IntervalStamped";
  }

  static const char* value(const ::calibration_msgs::IntervalStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration_msgs::IntervalStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"Interval interval\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/Interval\n"
"time start\n"
"time end\n"
;
  }

  static const char* value(const ::calibration_msgs::IntervalStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration_msgs::IntervalStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.interval);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IntervalStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration_msgs::IntervalStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration_msgs::IntervalStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "interval: ";
    s << std::endl;
    Printer< ::calibration_msgs::Interval_<ContainerAllocator> >::stream(s, indent + "  ", v.interval);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MSGS_MESSAGE_INTERVALSTAMPED_H
