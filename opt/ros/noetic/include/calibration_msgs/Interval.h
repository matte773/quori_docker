// Generated by gencpp from file calibration_msgs/Interval.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MSGS_MESSAGE_INTERVAL_H
#define CALIBRATION_MSGS_MESSAGE_INTERVAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calibration_msgs
{
template <class ContainerAllocator>
struct Interval_
{
  typedef Interval_<ContainerAllocator> Type;

  Interval_()
    : start()
    , end()  {
    }
  Interval_(const ContainerAllocator& _alloc)
    : start()
    , end()  {
  (void)_alloc;
    }



   typedef ros::Time _start_type;
  _start_type start;

   typedef ros::Time _end_type;
  _end_type end;





  typedef boost::shared_ptr< ::calibration_msgs::Interval_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration_msgs::Interval_<ContainerAllocator> const> ConstPtr;

}; // struct Interval_

typedef ::calibration_msgs::Interval_<std::allocator<void> > Interval;

typedef boost::shared_ptr< ::calibration_msgs::Interval > IntervalPtr;
typedef boost::shared_ptr< ::calibration_msgs::Interval const> IntervalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration_msgs::Interval_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration_msgs::Interval_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::calibration_msgs::Interval_<ContainerAllocator1> & lhs, const ::calibration_msgs::Interval_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.end == rhs.end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::calibration_msgs::Interval_<ContainerAllocator1> & lhs, const ::calibration_msgs::Interval_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace calibration_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::Interval_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::Interval_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::Interval_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::Interval_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::Interval_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::Interval_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration_msgs::Interval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef8dc98e5cfe048db2cfb689ace74756";
  }

  static const char* value(const ::calibration_msgs::Interval_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef8dc98e5cfe048dULL;
  static const uint64_t static_value2 = 0xb2cfb689ace74756ULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration_msgs::Interval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration_msgs/Interval";
  }

  static const char* value(const ::calibration_msgs::Interval_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration_msgs::Interval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time start\n"
"time end\n"
;
  }

  static const char* value(const ::calibration_msgs::Interval_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration_msgs::Interval_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Interval_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration_msgs::Interval_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration_msgs::Interval_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MSGS_MESSAGE_INTERVAL_H
