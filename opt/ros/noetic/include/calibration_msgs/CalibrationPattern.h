// Generated by gencpp from file calibration_msgs/CalibrationPattern.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MSGS_MESSAGE_CALIBRATIONPATTERN_H
#define CALIBRATION_MSGS_MESSAGE_CALIBRATIONPATTERN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace calibration_msgs
{
template <class ContainerAllocator>
struct CalibrationPattern_
{
  typedef CalibrationPattern_<ContainerAllocator> Type;

  CalibrationPattern_()
    : header()
    , object_points()
    , image_points()
    , success(0)  {
    }
  CalibrationPattern_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , object_points(_alloc)
    , image_points(_alloc)
    , success(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _object_points_type;
  _object_points_type object_points;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _image_points_type;
  _image_points_type image_points;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> const> ConstPtr;

}; // struct CalibrationPattern_

typedef ::calibration_msgs::CalibrationPattern_<std::allocator<void> > CalibrationPattern;

typedef boost::shared_ptr< ::calibration_msgs::CalibrationPattern > CalibrationPatternPtr;
typedef boost::shared_ptr< ::calibration_msgs::CalibrationPattern const> CalibrationPatternConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration_msgs::CalibrationPattern_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::calibration_msgs::CalibrationPattern_<ContainerAllocator1> & lhs, const ::calibration_msgs::CalibrationPattern_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.object_points == rhs.object_points &&
    lhs.image_points == rhs.image_points &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::calibration_msgs::CalibrationPattern_<ContainerAllocator1> & lhs, const ::calibration_msgs::CalibrationPattern_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace calibration_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5854af5462e19a169f68917c875a6238";
  }

  static const char* value(const ::calibration_msgs::CalibrationPattern_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5854af5462e19a16ULL;
  static const uint64_t static_value2 = 0x9f68917c875a6238ULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration_msgs/CalibrationPattern";
  }

  static const char* value(const ::calibration_msgs::CalibrationPattern_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Point[] object_points\n"
"geometry_msgs/Point[] image_points\n"
"uint8 success\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::calibration_msgs::CalibrationPattern_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.object_points);
      stream.next(m.image_points);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalibrationPattern_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration_msgs::CalibrationPattern_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "object_points[]" << std::endl;
    for (size_t i = 0; i < v.object_points.size(); ++i)
    {
      s << indent << "  object_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.object_points[i]);
    }
    s << indent << "image_points[]" << std::endl;
    for (size_t i = 0; i < v.image_points.size(); ++i)
    {
      s << indent << "  image_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.image_points[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MSGS_MESSAGE_CALIBRATIONPATTERN_H
