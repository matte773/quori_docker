#include "MLX90363.h"
#include <SPI.h>

#define MELEXIS_GET1 0x13
#define MELEXIS_GET2 0x14
#define MELEXIS_GET3 0x15
#define MELEXIS_MemoryRead 0x01
#define MELEXIS_EEPROMWrite 0x03
#define MELEXIS_EEChallengeAns 0x05
#define MELEXIS_EEReadChallenge 0x0F
#define MELEXIS_NOP 0x10
#define MELEXIS_DiagnosticDetails 0x16
#define MELEXIS_OscCounterStart 0x18
#define MELEXIS_OscCounterStop 0x1A
#define MELEXIS_Reboot 0x2F
#define MELEXIS_Standby 0x31

SPISettings settingsMLX(1000000, MSBFIRST, SPI_MODE1); 

const char cba_256_TAB [] = {0x00, 0x2f, 0x5e, 0x71, 0xbc, 0x93, 0xe2, 0xcd,
							0x57, 0x78, 0x09, 0x26, 0xeb, 0xc4, 0xb5, 0x9a,
							0xae, 0x81, 0xf0, 0xdf, 0x12, 0x3d, 0x4c, 0x63,
							0xf9, 0xd6, 0xa7, 0x88, 0x45, 0x6a, 0x1b, 0x34,
							0x73, 0x5c, 0x2d, 0x02, 0xcf, 0xe0, 0x91, 0xbe,
							0x24, 0x0b, 0x7a, 0x55, 0x98, 0xb7, 0xc6, 0xe9,
							0xdd, 0xf2, 0x83, 0xac, 0x61, 0x4e, 0x3f, 0x10,
							0x8a, 0xa5, 0xd4, 0xfb, 0x36, 0x19, 0x68, 0x47,
							0xe6, 0xc9, 0xb8, 0x97, 0x5a, 0x75, 0x04, 0x2b,
							0xb1, 0x9e, 0xef, 0xc0, 0x0d, 0x22, 0x53, 0x7c,
							0x48, 0x67, 0x16, 0x39, 0xf4, 0xdb, 0xaa, 0x85,
							0x1f, 0x30, 0x41, 0x6e, 0xa3, 0x8c, 0xfd, 0xd2,
							0x95, 0xba, 0xcb, 0xe4, 0x29, 0x06, 0x77, 0x58,
							0xc2, 0xed, 0x9c, 0xb3, 0x7e, 0x51, 0x20, 0x0f,
							0x3b, 0x14, 0x65, 0x4a, 0x87, 0xa8, 0xd9, 0xf6,
							0x6c, 0x43, 0x32, 0x1d, 0xd0, 0xff, 0x8e, 0xa1,
							0xe3, 0xcc, 0xbd, 0x92, 0x5f, 0x70, 0x01, 0x2e,
							0xb4, 0x9b, 0xea, 0xc5, 0x08, 0x27, 0x56, 0x79,
							0x4d, 0x62, 0x13, 0x3c, 0xf1, 0xde, 0xaf, 0x80,
							0x1a, 0x35, 0x44, 0x6b, 0xa6, 0x89, 0xf8, 0xd7,
							0x90, 0xbf, 0xce, 0xe1, 0x2c, 0x03, 0x72, 0x5d,
							0xc7, 0xe8, 0x99, 0xb6, 0x7b, 0x54, 0x25, 0x0a,
							0x3e, 0x11, 0x60, 0x4f, 0x82, 0xad, 0xdc, 0xf3,
							0x69, 0x46, 0x37, 0x18, 0xd5, 0xfa, 0x8b, 0xa4,
							0x05, 0x2a, 0x5b, 0x74, 0xb9, 0x96, 0xe7, 0xc8,
							0x52, 0x7d, 0x0c, 0x23, 0xee, 0xc1, 0xb0, 0x9f,
							0xab, 0x84, 0xf5, 0xda, 0x17, 0x38, 0x49, 0x66,
							0xfc, 0xd3, 0xa2, 0x8d, 0x40, 0x6f, 0x1e, 0x31,
							0x76, 0x59, 0x28, 0x07, 0xca, 0xe5, 0x94, 0xbb,
							0x21, 0x0e, 0x7f, 0x50, 0x9d, 0xb2, 0xc3, 0xec,
							0xd8, 0xf7, 0x86, 0xa9, 0x64, 0x4b, 0x3a, 0x15,
							0x8f, 0xa0, 0xd1, 0xfe, 0x33, 0x1c, 0x6d, 0x42};

MLX90363::MLX90363(uint8_t sspin) : slave_select(sspin)
{
	SPI.begin(); 
    pinMode (slave_select, OUTPUT);
    digitalWrite(slave_select,HIGH);
    zero_position = 0;
    summed_value = 0;
    raw_value = 0;

}

void MLX90363::InitializeSPI(int mosi, int miso, int sck)
{
    pinMode(mosi, OUTPUT); 
    pinMode(sck, OUTPUT); 
    pinMode(miso, OUTPUT); 
    SPI.setMOSI(mosi);  //11
    SPI.setSCK(sck);    //13
    SPI.setMISO(miso);  //12
    SPI.begin();
}

void MLX90363::SetZeroPosition(int16_t offset)
{
    zero_position = offset;
    summed_value = -zero_position;
}

bool MLX90363::SendGET3()
{
    memset(&send_buffer,0,sizeof(uint8_t)*8);
    send_buffer[2] = 0xFF;
    send_buffer[3] = 0xFF;
	  send_buffer[6] = 0x00 | MELEXIS_GET3;   // alpha-diganostic
	send_buffer[7] = 0x08;
    return SendSPI();
}

bool MLX90363::SendNOP()
{
    memset(&send_buffer,0,sizeof(uint8_t)*8);
    send_buffer[2] = 0xFF;
    send_buffer[3] = 0xFF;
    send_buffer[6] = 0xC0 | MELEXIS_NOP;
	send_buffer[7] = 0xAB;
    return SendSPI();
}

bool MLX90363::SendSPI()
{
    Checksum(send_buffer);
	SPI.beginTransaction(settingsMLX);
    digitalWrite(slave_select,LOW);
    delayMicroseconds(1);
    for (i=0; i<8; i++)
      receive_buffer[i] = SPI.transfer(send_buffer[i]);
    delayMicroseconds(1);
    digitalWrite(slave_select,HIGH);
	SPI.endTransaction();
    return Checksum(receive_buffer);
}

bool MLX90363::Checksum(uint8_t *message)
{
    crc = message[7];
    message[7] = 0xFF;
    for (j=0; j<7; j++)
        message[7] = cba_256_TAB[ message[j] ^ message[7] ];
    message[7] = ~message[7];
    if ((receive_buffer[2]|receive_buffer[3]|receive_buffer[5])!=0x00){
    	// a different message has been recieved
    	return true;
    }
    if ((receive_buffer[6] >>6)!= 0x00){
    // the message is not and apla message.
    	return true;
    }
    return !(message[7]==crc);// returning true means there is an error.
}

int64_t MLX90363::ReadAngle()
{
    const static int16_t OVERFLOW_EPSILON = 100;
    // Previous value
    const int16_t prev_value = raw_value;

    // A 14-bit value is read from the sensor.
    raw_value = (int16_t)(
        receive_buffer[0] | ((receive_buffer[1]&0x3F)<<8)
    ); 
    raw_value = raw_value - zero_position;
    if (raw_value >= 8191)
      raw_value -= 16384;
    if (raw_value <= -8192)
      raw_value += 16384;

    // if (prev_value > 0x4000 - OVERFLOW_EPSILON && raw_value < OVERFLOW_EPSILON)
    // {
    //     summed_value += (0x4000 - prev_value) + raw_value;
    // }
    // else if (prev_value < OVERFLOW_EPSILON && raw_value > 0x4000 - OVERFLOW_EPSILON)
    // {
    //     summed_value += prev_value + (0x4000 - raw_value);
    // }
    // else
    // {
    //     summed_value += raw_value - prev_value;
    // }

    return raw_value;
}

void MLX90363::PrintReceiveBuffer()
{
  for (i=0; i<8; i++) {
    Serial.printf("Byte %d: 0x%02x\n",i,receive_buffer[i]);
  }
}

double MLX90363::WholeMessage()
{
double wholemessage = 0;
for (i=0; i<8; i++) {
    wholemessage = wholemessage+(int64_t)(receive_buffer[i]<<(8*i));
  }
return wholemessage;
}
